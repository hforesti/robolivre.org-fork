<?php

/**
 * AmigosTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class AmigosTable extends Doctrine_Table {

    /**
     * Returns an instance of this class.
     *
     * @return object AmigosTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('Amigos');
    }

    public function solicitarAmizade(Amigos $amizade) {

        $q = Doctrine_Query::create()
                ->select("count(*) as quantidade")
                ->from('Amigos')
                ->where("id_usuario_a = " . $amizade->getIdUsuarioA())
                ->andWhere("id_usuario_b = " . $amizade->getIdUsuarioB())
                ->andWhere("aceito <> 1");
        $resultado = $q->fetchArray();

        if ($resultado[0]['quantidade'] == 0) {
            $query = "INSERT INTO amigos (id_usuario_a,id_usuario_b)
                VALUES (" . $amizade->getIdUsuarioA() . ", " . $amizade->getIdUsuarioB() . ")";
            $connection = Doctrine_Manager::getInstance()
                            ->getCurrentConnection()->getDbh();
            // Get Connection of Database  
            $statement = $connection->prepare($query);
            // Make Statement  
            $statement->execute();
        } else {
            $query = "UPDATE amigos 
                 SET aceito = 0
                WHERE id_usuario_a = " . $amizade->getIdUsuarioA() . " AND id_usuario_b = " . $amizade->getIdUsuarioB();
            $connection = Doctrine_Manager::getInstance()
                            ->getCurrentConnection()->getDbh();
            // Get Connection of Database  
            $statement = $connection->prepare($query);
            // Make Statement  
            $statement->execute();
        }

        $logSistema = new LogsSistema();
        $logSistema->setIdUsuario(UsuarioLogado::getInstancia()->getIdUsuario());
        $logSistema->setTipoLog(LogsSistema::SOLICITOU_AMIZADE);
        $logSistema->setDescricao(LogsSistema::getDescricaoPeloTipo(LogsSistema::SOLICITOU_AMIZADE));
        $logSistema->setDataPublicacao(date('Y-m-d H:i:s'));
        $logSistema->setParametros(
                "IP:" . UsuarioLogado::getInstancia()->getEnderecoRemoto() . LogsSistema::SEPARADOR .
                "ID_USUARIO: " . $amizade->getIdUsuarioB()
        );
        $logSistema->save();
    }

    public function aceitarAmizade(Amigos $amizade) {
        $query = "UPDATE amigos 
                 SET aceito = 1
                WHERE id_usuario_a = " . $amizade->getIdUsuarioA() . " AND id_usuario_b = " . $amizade->getIdUsuarioB();
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  
        $statement = $connection->prepare($query);
        // Make Statement  
        $statement->execute();

        $logSistema = new LogsSistema();
        $logSistema->setIdUsuario(UsuarioLogado::getInstancia()->getIdUsuario());
        $logSistema->setTipoLog(LogsSistema::ACEITAR_SOLICITACAO);
        $logSistema->setDescricao(LogsSistema::getDescricaoPeloTipo(LogsSistema::ACEITAR_SOLICITACAO));
        $logSistema->setDataPublicacao(date('Y-m-d H:i:s'));
        $logSistema->setParametros(
                "IP:" . UsuarioLogado::getInstancia()->getEnderecoRemoto() . LogsSistema::SEPARADOR .
                "ID_USUARIO: " . $amizade->getIdUsuarioA()
        );
        $logSistema->save();
    }

    public function recusarAmizade(Amigos $amizade) {
        $query = "DELETE FROM amigos 
                WHERE id_usuario_a = " . $amizade->getIdUsuarioA() . " AND id_usuario_b = " . $amizade->getIdUsuarioB();
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  
        $statement = $connection->prepare($query);
        // Make Statement  
        $statement->execute();
        
        $logSistema = new LogsSistema();
        $logSistema->setIdUsuario(UsuarioLogado::getInstancia()->getIdUsuario());
        $logSistema->setTipoLog(LogsSistema::RECUSAR_SOLICITACAO);
        $logSistema->setDescricao(LogsSistema::getDescricaoPeloTipo(LogsSistema::RECUSAR_SOLICITACAO));
        $logSistema->setDataPublicacao(date('Y-m-d H:i:s'));
        $logSistema->setParametros(
                "IP:" . UsuarioLogado::getInstancia()->getEnderecoRemoto() . LogsSistema::SEPARADOR .
                "ID_USUARIO: " . $amizade->getIdUsuarioA());
        $logSistema->save();
    }

    public function getSolicitacoesPendentes($idUsuarioLogado) {
        $arrayRetorno = array();
        if(isset($idUsuarioLogado)){
            $query =
                    "SELECT a.id_usuario_a,u.nome,u.imagem_perfil,a.data_solicitacao
            FROM usuarios u RIGHT JOIN amigos a ON a.id_usuario_a = u.id_usuario
            where a.id_usuario_b = $idUsuarioLogado and a.aceito = 0
            order by a.data_solicitacao DESC";
            $connection = Doctrine_Manager::getInstance()
                            ->getCurrentConnection()->getDbh();
            // Get Connection of Database  
            $statement = $connection->prepare($query);
            // Make Statement  
            $statement->execute();

            $resultado = $statement->fetchAll();

            if ($resultado) {
                foreach ($resultado as $reg) {
                    $amigos = new Amigos();
                    
                    $amigos->setIdUsuarioA($reg['id_usuario_a']);
                    $amigos->setDataSolicitacao($reg['data_solicitacao']);
                    $amigos->setNomeUsuarioSolicitacao($reg['nome']);
                    $amigos->setImagemPerfilUsuarioSolicitacao($reg['imagem_perfil']);
                    $arrayData = Util::dataBrHora($reg['data_solicitacao']);
                    
                    if(!isset($arrayRetorno[$arrayData[0]])){
                        $arrayRetorno[$arrayData[0]] = array();
                    }
                    $arrayRetorno[$arrayData[0]][] = $amigos;
                    
                }
            }
        }
        return $arrayRetorno;
    }

}
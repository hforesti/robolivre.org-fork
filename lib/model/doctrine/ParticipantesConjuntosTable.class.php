<?php

/**
 * ParticipantesConjuntosTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class ParticipantesConjuntosTable extends Doctrine_Table
{
    /**
     * Returns an instance of this class.
     *
     * @return object ParticipantesConjuntosTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('ParticipantesConjuntos');
    }
    
    public function solicitarParticipacao(ParticipantesConjuntos $participacao) {

        $q = Doctrine_Query::create()
                ->select("count(*) as quantidade")
                ->from('ParticipantesConjuntos')
                ->where("id_usuario = " . $participacao->getIdUsuario())
                ->andWhere("id_conjunto = " . $participacao->getIdConjunto())
                ->andWhere("id_tipo_conjunto = " . $participacao->getIdTipoConjunto());
        $resultado = $q->fetchArray();

        if ($resultado[0]['quantidade'] == 0) {
            $query = "INSERT INTO participantes_conjuntos (id_usuario,id_conjunto,id_tipo_conjunto,id_tipo_permissao_conjunto)
                VALUES (" . $participacao->getIdUsuario() . ", " . $participacao->getIdConjunto() . ",".$participacao->getIdTipoConjunto().",3)";
            $connection = Doctrine_Manager::getInstance()
                            ->getCurrentConnection()->getDbh();
            // Get Connection of Database  
            $statement = $connection->prepare($query);
            // Make Statement  
            $statement->execute();
        } else {
            $query = "UPDATE participantes_conjuntos 
                 SET aceito = 1
                WHERE id_usuario = " . $participacao->getIdUsuario() . " AND id_conjunto = " . $participacao->getIdConjunto()." AND id_tipo_conjunto = " . $participacao->getIdTipoConjunto();
            $connection = Doctrine_Manager::getInstance()
                            ->getCurrentConnection()->getDbh();
            // Get Connection of Database  
            $statement = $connection->prepare($query);
            // Make Statement  
            $statement->execute();
        }

        $logSistema = new LogsSistema();
        $logSistema->setIdUsuario(UsuarioLogado::getInstancia()->getIdUsuario());
        if($participacao->getIdTipoConjunto() == Conjuntos::TIPO_CONTEUDO){
            $logSistema->setTipoLog(LogsSistema::SEGUIR_CONTEUDO);
            $logSistema->setDescricao(LogsSistema::getDescricaoPeloTipo(LogsSistema::SEGUIR_CONTEUDO));
        }
        if($participacao->getIdTipoConjunto() == Conjuntos::TIPO_COMUNIDADE){
            $logSistema->setTipoLog(LogsSistema::PARTICIPAR_COMUNIDADE);
            $logSistema->setDescricao(LogsSistema::getDescricaoPeloTipo(LogsSistema::PARTICIPAR_COMUNIDADE));
        }
        $logSistema->setDataPublicacao(date('Y-m-d H:i:s'));
        $logSistema->setParametros(
                "IP:" . UsuarioLogado::getInstancia()->getEnderecoRemoto() . LogsSistema::SEPARADOR.
                "ID_CONJUNTO:".$participacao->getIdConjunto()
        );
        $logSistema->save();
        
        $id_conjunto = $participacao->getIdConjunto();
                
        $objPublicacao = new Publicacoes();
        $objPublicacao->setIdUsuario(UsuarioLogado::getInstancia()->getIdUsuario());
        $objPublicacao->setDataPublicacao(date('Y-m-d H:i:s'));
        $objPublicacao->setIdConjunto($id_conjunto);
        $objPublicacao->setTipoPublicacao(Publicacoes::SEGUIR_CONTEUDO);

        $objPublicacao->save();
        
    }
    
    public function removerParticipacao(ParticipantesConjuntos $participacao){
        
        $query = "UPDATE participantes_conjuntos 
                SET aceito = NULL
            WHERE id_usuario = " . $participacao->getIdUsuario() . " AND id_conjunto = " . $participacao->getIdConjunto()." AND id_tipo_conjunto = " . $participacao->getIdTipoConjunto().";
                UPDATE publicacoes 
                SET visivel = 0 WHERE tipo_publicacao = ".Publicacoes::SEGUIR_CONTEUDO." AND id_usuario = " . $participacao->getIdUsuario() . " AND id_conjunto = " . $participacao->getIdConjunto()."";
        $connection = Doctrine_Manager::getInstance()
                        ->getCurrentConnection()->getDbh();
        // Get Connection of Database  
        $statement = $connection->prepare($query);
        // Make Statement  
        $statement->execute();
    }
    
    
}